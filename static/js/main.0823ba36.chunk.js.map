{"version":3,"sources":["MyCard.js","MyModal.js","App.js","serviceWorker.js","index.js"],"names":["MyCard","props","key","myKey","isFlipped","flipped","flipDirection","iconName","Card","style","backgroundColor","height","border","className","id","size","color","MyModal","Modal","show","onHide","aria-labelledby","centered","Header","closeButton","Title","Body","children","Footer","Button","onClick","btn","App","iconArray","IoIosAirplane","IoIosAlarm","IoIosContact","IoIosHourglass","IoIosSave","IoIosSettings","IoLogoGameControllerB","IoMdHeadset","getRandomIconArray","arr","myArray","length","randomIndex","Math","floor","random","temp","iconSet","timeToPercentage","currentMilliSeconds","maxSeconds","percentage","clearInterval","intervalNumber","useState","icons","setIcons","Array","fill","setIsFlipped","count","setCount","prevCardId","setPrevCardId","correctMatches","setCorrectMatches","isOver","setIsOver","React","instructionsModal","setinstructionsModal","timerValue","setTimerValue","gameOverModal","setGameOverModal","setIntervalNumber","useEffect","findMatchCard","curFlippedValues","curCardId","intervalNo","currentIconSet","currentFlippedValues","width","setInterval","value","calculateTimer","map","item","index","event","oldFlippedValues","cardId","target","handleClick","restartGame","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0823ba36.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport { FaCheck } from \"react-icons/fa\";\r\nimport ReactCardFlip from \"react-card-flip\";\r\n\r\nexport default function MyCard(props) {\r\n  return (\r\n    <ReactCardFlip\r\n      key={props.myKey}\r\n      isFlipped={props.flipped !== -1 ? props.flipped : false}\r\n      flipDirection=\"horizontal\"\r\n    >\r\n      {/* front card  */}\r\n      {props.iconName === -1 ? (\r\n        <Card style={{ backgroundColor: \"#FFF\", height: \"24.68vh\", border: \"none\" }} />\r\n      ) : (\r\n        <Card\r\n          style={{ backgroundColor: \"#8B78E6\", height: \"24.68vh\" }}\r\n          className=\"text-center\"\r\n          id={props.myKey}\r\n        ></Card>\r\n      )}\r\n\r\n      {/* back Card  */}\r\n      <Card\r\n        style={{ backgroundColor: \"#d63031\", height: \"24.68vh\" }}\r\n        className=\"text-center\"\r\n        id={props.myKey}\r\n      >\r\n        <p className=\"m-4 pt-4\" id={props.myKey}>\r\n          {props.iconName !== -1 ? (\r\n            <props.iconName size=\"4rem\" color=\"#FFF\" />\r\n          ) : (\r\n            <FaCheck size=\"4rem\" color=\"#2ecc72\" />\r\n          )}\r\n        </p>\r\n      </Card>\r\n    </ReactCardFlip>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nexport default function MyModal(props) {\r\n  return (\r\n    <Modal\r\n      show={props.show}\r\n      onHide={props.onHide}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Card Memory Game\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{props.children}</Modal.Body>\r\n      <Modal.Footer>\r\n        <Button className=\"btn-success btn-lg\" onClick={props.onHide}>\r\n          {props.btn}\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport MyCard from \"./MyCard\";\nimport MyModal from \"./MyModal\";\nimport {\n  IoIosAirplane,\n  IoIosAlarm,\n  IoIosContact,\n  IoIosHourglass,\n  IoIosSave,\n  IoLogoGameControllerB,\n  IoIosSettings,\n  IoMdHeadset,\n} from \"react-icons/io\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nfunction App() {\n  // setting up icons\n  const iconArray = [\n    IoIosAirplane,\n    IoIosAlarm,\n    IoIosContact,\n    IoIosHourglass,\n    IoIosSave,\n    IoIosSettings,\n    IoLogoGameControllerB,\n    IoMdHeadset,\n  ];\n\n  const getRandomIconArray = (arr) => {\n    let myArray = [...arr];\n    let length = myArray.length - 1;\n    for (; length > 0; length--) {\n      const randomIndex = Math.floor(Math.random() * (length + 1));\n      const temp = myArray[length];\n      myArray[length] = myArray[randomIndex];\n      myArray[randomIndex] = temp;\n    }\n    return myArray;\n  };\n\n  const iconSet = getRandomIconArray([\n    ...getRandomIconArray(iconArray),\n    ...getRandomIconArray(iconArray),\n  ]);\n\n  const timeToPercentage = (currentMilliSeconds, maxSeconds) => {\n    const currentSeconds = currentMilliSeconds / 1000;\n    const percentage = (currentSeconds / maxSeconds) * 100;\n    if (percentage < 100) {\n      return percentage;\n    } else {\n      clearInterval(intervalNumber);\n      return null;\n    }\n  };\n\n  // setting up useState hooks\n  const [icons, setIcons] = useState([]);\n  const [isFlipped, setIsFlipped] = useState(new Array(16).fill(false));\n  const [count, setCount] = useState(1);\n  const [prevCardId, setPrevCardId] = useState(-1);\n  const [correctMatches, setCorrectMatches] = useState(0);\n  const [isOver, setIsOver] = useState(false);\n  const [instructionsModal, setinstructionsModal] = React.useState(false);\n  const [timerValue, setTimerValue] = useState(0);\n  const [gameOverModal, setGameOverModal] = useState(false);\n  const [intervalNumber, setIntervalNumber] = useState(0);\n\n  // using useEffect hooks\n  useEffect(() => {\n    if (icons.length < 16) {\n      setIcons(iconSet);\n      setinstructionsModal(true);\n    }\n\n    if (!isOver) {\n      if (correctMatches === 8) {\n        setIsOver(true);\n      }\n    } else {\n      setGameOverModal(true);\n      clearInterval(intervalNumber);\n    }\n  }, [setIcons, iconSet, icons, isOver, correctMatches, intervalNumber]);\n\n  // handling the on click event for card\n  const handleClick = (event) => {\n    var oldFlippedValues = [...isFlipped];\n    const cardId = event.target.id;\n\n    if (oldFlippedValues[cardId] === false) {\n      if (prevCardId === -1) {\n        setPrevCardId(cardId);\n      }\n      oldFlippedValues[cardId] = !oldFlippedValues[cardId];\n      setIsFlipped(oldFlippedValues);\n      setCount(count + 1);\n    }\n\n    if (count === 2) {\n      let intervalNo = setInterval(() => {\n        findMatchCard(oldFlippedValues, cardId, intervalNo);\n      }, 1000);\n    }\n  };\n\n  const findMatchCard = (curFlippedValues, curCardId, intervalNo) => {\n    const currentIconSet = [...icons];\n    const currentFlippedValues = [...curFlippedValues];\n\n    const prevCard = currentIconSet[prevCardId];\n    const curCard = currentIconSet[curCardId];\n\n    if (prevCard === curCard) {\n      // disabling the card\n      currentIconSet[prevCardId] = -1;\n      currentIconSet[curCardId] = -1;\n\n      currentFlippedValues[curCardId] = -1;\n      currentFlippedValues[prevCardId] = -1;\n\n      setIcons(currentIconSet);\n      setIsFlipped(currentFlippedValues);\n      setPrevCardId(-1);\n      setCount(1);\n      setCorrectMatches(correctMatches + 1);\n    } else {\n      // reflip the cards\n      currentFlippedValues[curCardId] = !currentFlippedValues[curCardId];\n      currentFlippedValues[prevCardId] = !currentFlippedValues[prevCardId];\n\n      setIsFlipped(currentFlippedValues);\n      setPrevCardId(-1);\n      setCount(1);\n    }\n\n    clearInterval(intervalNo);\n  };\n\n  const calculateTimer = () => {\n    setinstructionsModal(false);\n    var currentMilliSeconds = 1;\n    const intervalNo = setInterval(() => {\n      const value = timeToPercentage(currentMilliSeconds, 40);\n      setIntervalNumber(intervalNo);\n      if (value !== null) {\n        setTimerValue(value);\n      } else {\n        setIsOver(true);\n      }\n      currentMilliSeconds += 100;\n    }, 100);\n  };\n\n  const restartGame = () => {\n    setIcons(iconSet);\n    setIsFlipped(new Array(16).fill(false));\n    setCount(1);\n    setPrevCardId(-1);\n    setCorrectMatches(0);\n    setIsOver(false);\n    setinstructionsModal(false);\n    setTimerValue(0);\n    setGameOverModal(false);\n\n    var currentMilliSeconds = 1;\n    const intervalNo = setInterval(() => {\n      const value = timeToPercentage(currentMilliSeconds, 40);\n      setIntervalNumber(intervalNo);\n      if (value !== null) {\n        setTimerValue(value);\n      } else {\n        setIsOver(true);\n      }\n      currentMilliSeconds += 100;\n    }, 100);\n  };\n\n  // returning the jsx for game\n  return (\n    <div>\n      <div className=\"progressMainWrapper\">\n        <div\n          className=\"progressMainStyle\"\n          style={{ width: `${timerValue}%` }}\n        ></div>\n      </div>\n      <div className=\"container-fluid\">\n        <MyModal\n          show={instructionsModal}\n          btn=\"Start\"\n          onHide={() => {\n            calculateTimer();\n          }}\n        >\n          <h5>Instructions: </h5>\n          <ul>\n            <li>It is a timed card memory game.</li>\n            <li>\n              Click the cards to see what symbol they uncover and try to find\n              the matching symbol underneath the other cards.\n            </li>\n            <li>\n              Uncover two matching symbols at once to eliminate them from the\n              game.\n            </li>\n            <li>Eliminate all cards as fast as you can to win the game.</li>\n            <li>Have a Fun :)</li>\n          </ul>\n        </MyModal>\n        <div className=\"row\">\n          {icons.map((item, index) => {\n            return (\n              <div\n                key={index}\n                onClick={(event) => {\n                  handleClick(event);\n                }}\n                className=\"col-3 p-0\"\n              >\n                <MyCard\n                  myKey={index}\n                  flipped={isFlipped[index]}\n                  iconName={item}\n                />\n              </div>\n            );\n          })}\n        </div>\n        <MyModal\n          show={gameOverModal}\n          onHide={() => {\n            restartGame();\n          }}\n          btn=\"Restart\"\n        >\n          {correctMatches === 8 ? (\n            // Game Win Status\n            <div className=\"text-center\">\n              <h4 className=\"display-4\" style={{ color: \"green\" }}>\n                You Won The Game\n              </h4>\n            </div>\n          ) : (\n            // Game Lose Status\n            <div className=\"text-center\">\n              <h4 className=\"display-4\" style={{ color: \"red\" }}>\n                Failed\n              </h4>\n              <h6>Try Again Next Time</h6>\n            </div>\n          )}\n          <br />\n          <div className=\"container\">\n            <h6>Symbols Found: {correctMatches} / 8</h6>\n          </div>\n        </MyModal>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}